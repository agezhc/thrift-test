/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package cn.myera.whurec.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-4-21")
public class Book implements org.apache.thrift.TBase<Book, Book._Fields>, java.io.Serializable, Cloneable, Comparable<Book> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Book");

  private static final org.apache.thrift.protocol.TField BOOK_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("book_order", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BOOK_ORDER_OPAC_FIELD_DESC = new org.apache.thrift.protocol.TField("book_order_opac", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BOOK_MODEL_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("book_model_order", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BOOK_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("book_title", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField AUTHOR_FIELD_DESC = new org.apache.thrift.protocol.TField("author", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField AUTHORS_FIELD_DESC = new org.apache.thrift.protocol.TField("authors", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PUB_YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("pub_year", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IMPRINT_FIELD_DESC = new org.apache.thrift.protocol.TField("imprint", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CLC_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("clc_code", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField KEYWORDS_FIELD_DESC = new org.apache.thrift.protocol.TField("keywords", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField ISXN_FIELD_DESC = new org.apache.thrift.protocol.TField("isxn", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField CALL_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("call_no", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BookStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BookTupleSchemeFactory());
  }

  public String book_order; // required
  public String book_order_opac; // required
  public int book_model_order; // required
  public String book_title; // required
  public String author; // required
  public String authors; // required
  public String pub_year; // required
  public String imprint; // required
  public String clc_code; // required
  public String keywords; // required
  public String isxn; // required
  public String call_no; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BOOK_ORDER((short)1, "book_order"),
    BOOK_ORDER_OPAC((short)2, "book_order_opac"),
    BOOK_MODEL_ORDER((short)3, "book_model_order"),
    BOOK_TITLE((short)4, "book_title"),
    AUTHOR((short)5, "author"),
    AUTHORS((short)6, "authors"),
    PUB_YEAR((short)7, "pub_year"),
    IMPRINT((short)8, "imprint"),
    CLC_CODE((short)9, "clc_code"),
    KEYWORDS((short)10, "keywords"),
    ISXN((short)11, "isxn"),
    CALL_NO((short)12, "call_no");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BOOK_ORDER
          return BOOK_ORDER;
        case 2: // BOOK_ORDER_OPAC
          return BOOK_ORDER_OPAC;
        case 3: // BOOK_MODEL_ORDER
          return BOOK_MODEL_ORDER;
        case 4: // BOOK_TITLE
          return BOOK_TITLE;
        case 5: // AUTHOR
          return AUTHOR;
        case 6: // AUTHORS
          return AUTHORS;
        case 7: // PUB_YEAR
          return PUB_YEAR;
        case 8: // IMPRINT
          return IMPRINT;
        case 9: // CLC_CODE
          return CLC_CODE;
        case 10: // KEYWORDS
          return KEYWORDS;
        case 11: // ISXN
          return ISXN;
        case 12: // CALL_NO
          return CALL_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BOOK_MODEL_ORDER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BOOK_ORDER, new org.apache.thrift.meta_data.FieldMetaData("book_order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOOK_ORDER_OPAC, new org.apache.thrift.meta_data.FieldMetaData("book_order_opac", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOOK_MODEL_ORDER, new org.apache.thrift.meta_data.FieldMetaData("book_model_order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BOOK_TITLE, new org.apache.thrift.meta_data.FieldMetaData("book_title", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR, new org.apache.thrift.meta_data.FieldMetaData("author", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHORS, new org.apache.thrift.meta_data.FieldMetaData("authors", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUB_YEAR, new org.apache.thrift.meta_data.FieldMetaData("pub_year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMPRINT, new org.apache.thrift.meta_data.FieldMetaData("imprint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLC_CODE, new org.apache.thrift.meta_data.FieldMetaData("clc_code", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYWORDS, new org.apache.thrift.meta_data.FieldMetaData("keywords", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ISXN, new org.apache.thrift.meta_data.FieldMetaData("isxn", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CALL_NO, new org.apache.thrift.meta_data.FieldMetaData("call_no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Book.class, metaDataMap);
  }

  public Book() {
  }

  public Book(
    String book_order,
    String book_order_opac,
    int book_model_order,
    String book_title,
    String author,
    String authors,
    String pub_year,
    String imprint,
    String clc_code,
    String keywords,
    String isxn,
    String call_no)
  {
    this();
    this.book_order = book_order;
    this.book_order_opac = book_order_opac;
    this.book_model_order = book_model_order;
    setBook_model_orderIsSet(true);
    this.book_title = book_title;
    this.author = author;
    this.authors = authors;
    this.pub_year = pub_year;
    this.imprint = imprint;
    this.clc_code = clc_code;
    this.keywords = keywords;
    this.isxn = isxn;
    this.call_no = call_no;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Book(Book other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBook_order()) {
      this.book_order = other.book_order;
    }
    if (other.isSetBook_order_opac()) {
      this.book_order_opac = other.book_order_opac;
    }
    this.book_model_order = other.book_model_order;
    if (other.isSetBook_title()) {
      this.book_title = other.book_title;
    }
    if (other.isSetAuthor()) {
      this.author = other.author;
    }
    if (other.isSetAuthors()) {
      this.authors = other.authors;
    }
    if (other.isSetPub_year()) {
      this.pub_year = other.pub_year;
    }
    if (other.isSetImprint()) {
      this.imprint = other.imprint;
    }
    if (other.isSetClc_code()) {
      this.clc_code = other.clc_code;
    }
    if (other.isSetKeywords()) {
      this.keywords = other.keywords;
    }
    if (other.isSetIsxn()) {
      this.isxn = other.isxn;
    }
    if (other.isSetCall_no()) {
      this.call_no = other.call_no;
    }
  }

  public Book deepCopy() {
    return new Book(this);
  }

  @Override
  public void clear() {
    this.book_order = null;
    this.book_order_opac = null;
    setBook_model_orderIsSet(false);
    this.book_model_order = 0;
    this.book_title = null;
    this.author = null;
    this.authors = null;
    this.pub_year = null;
    this.imprint = null;
    this.clc_code = null;
    this.keywords = null;
    this.isxn = null;
    this.call_no = null;
  }

  public String getBook_order() {
    return this.book_order;
  }

  public Book setBook_order(String book_order) {
    this.book_order = book_order;
    return this;
  }

  public void unsetBook_order() {
    this.book_order = null;
  }

  /** Returns true if field book_order is set (has been assigned a value) and false otherwise */
  public boolean isSetBook_order() {
    return this.book_order != null;
  }

  public void setBook_orderIsSet(boolean value) {
    if (!value) {
      this.book_order = null;
    }
  }

  public String getBook_order_opac() {
    return this.book_order_opac;
  }

  public Book setBook_order_opac(String book_order_opac) {
    this.book_order_opac = book_order_opac;
    return this;
  }

  public void unsetBook_order_opac() {
    this.book_order_opac = null;
  }

  /** Returns true if field book_order_opac is set (has been assigned a value) and false otherwise */
  public boolean isSetBook_order_opac() {
    return this.book_order_opac != null;
  }

  public void setBook_order_opacIsSet(boolean value) {
    if (!value) {
      this.book_order_opac = null;
    }
  }

  public int getBook_model_order() {
    return this.book_model_order;
  }

  public Book setBook_model_order(int book_model_order) {
    this.book_model_order = book_model_order;
    setBook_model_orderIsSet(true);
    return this;
  }

  public void unsetBook_model_order() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __BOOK_MODEL_ORDER_ISSET_ID);
  }

  /** Returns true if field book_model_order is set (has been assigned a value) and false otherwise */
  public boolean isSetBook_model_order() {
    return EncodingUtils.testBit(__isset_bitfield, __BOOK_MODEL_ORDER_ISSET_ID);
  }

  public void setBook_model_orderIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __BOOK_MODEL_ORDER_ISSET_ID, value);
  }

  public String getBook_title() {
    return this.book_title;
  }

  public Book setBook_title(String book_title) {
    this.book_title = book_title;
    return this;
  }

  public void unsetBook_title() {
    this.book_title = null;
  }

  /** Returns true if field book_title is set (has been assigned a value) and false otherwise */
  public boolean isSetBook_title() {
    return this.book_title != null;
  }

  public void setBook_titleIsSet(boolean value) {
    if (!value) {
      this.book_title = null;
    }
  }

  public String getAuthor() {
    return this.author;
  }

  public Book setAuthor(String author) {
    this.author = author;
    return this;
  }

  public void unsetAuthor() {
    this.author = null;
  }

  /** Returns true if field author is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthor() {
    return this.author != null;
  }

  public void setAuthorIsSet(boolean value) {
    if (!value) {
      this.author = null;
    }
  }

  public String getAuthors() {
    return this.authors;
  }

  public Book setAuthors(String authors) {
    this.authors = authors;
    return this;
  }

  public void unsetAuthors() {
    this.authors = null;
  }

  /** Returns true if field authors is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthors() {
    return this.authors != null;
  }

  public void setAuthorsIsSet(boolean value) {
    if (!value) {
      this.authors = null;
    }
  }

  public String getPub_year() {
    return this.pub_year;
  }

  public Book setPub_year(String pub_year) {
    this.pub_year = pub_year;
    return this;
  }

  public void unsetPub_year() {
    this.pub_year = null;
  }

  /** Returns true if field pub_year is set (has been assigned a value) and false otherwise */
  public boolean isSetPub_year() {
    return this.pub_year != null;
  }

  public void setPub_yearIsSet(boolean value) {
    if (!value) {
      this.pub_year = null;
    }
  }

  public String getImprint() {
    return this.imprint;
  }

  public Book setImprint(String imprint) {
    this.imprint = imprint;
    return this;
  }

  public void unsetImprint() {
    this.imprint = null;
  }

  /** Returns true if field imprint is set (has been assigned a value) and false otherwise */
  public boolean isSetImprint() {
    return this.imprint != null;
  }

  public void setImprintIsSet(boolean value) {
    if (!value) {
      this.imprint = null;
    }
  }

  public String getClc_code() {
    return this.clc_code;
  }

  public Book setClc_code(String clc_code) {
    this.clc_code = clc_code;
    return this;
  }

  public void unsetClc_code() {
    this.clc_code = null;
  }

  /** Returns true if field clc_code is set (has been assigned a value) and false otherwise */
  public boolean isSetClc_code() {
    return this.clc_code != null;
  }

  public void setClc_codeIsSet(boolean value) {
    if (!value) {
      this.clc_code = null;
    }
  }

  public String getKeywords() {
    return this.keywords;
  }

  public Book setKeywords(String keywords) {
    this.keywords = keywords;
    return this;
  }

  public void unsetKeywords() {
    this.keywords = null;
  }

  /** Returns true if field keywords is set (has been assigned a value) and false otherwise */
  public boolean isSetKeywords() {
    return this.keywords != null;
  }

  public void setKeywordsIsSet(boolean value) {
    if (!value) {
      this.keywords = null;
    }
  }

  public String getIsxn() {
    return this.isxn;
  }

  public Book setIsxn(String isxn) {
    this.isxn = isxn;
    return this;
  }

  public void unsetIsxn() {
    this.isxn = null;
  }

  /** Returns true if field isxn is set (has been assigned a value) and false otherwise */
  public boolean isSetIsxn() {
    return this.isxn != null;
  }

  public void setIsxnIsSet(boolean value) {
    if (!value) {
      this.isxn = null;
    }
  }

  public String getCall_no() {
    return this.call_no;
  }

  public Book setCall_no(String call_no) {
    this.call_no = call_no;
    return this;
  }

  public void unsetCall_no() {
    this.call_no = null;
  }

  /** Returns true if field call_no is set (has been assigned a value) and false otherwise */
  public boolean isSetCall_no() {
    return this.call_no != null;
  }

  public void setCall_noIsSet(boolean value) {
    if (!value) {
      this.call_no = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case BOOK_ORDER:
      if (value == null) {
        unsetBook_order();
      } else {
        setBook_order((String)value);
      }
      break;

    case BOOK_ORDER_OPAC:
      if (value == null) {
        unsetBook_order_opac();
      } else {
        setBook_order_opac((String)value);
      }
      break;

    case BOOK_MODEL_ORDER:
      if (value == null) {
        unsetBook_model_order();
      } else {
        setBook_model_order((Integer)value);
      }
      break;

    case BOOK_TITLE:
      if (value == null) {
        unsetBook_title();
      } else {
        setBook_title((String)value);
      }
      break;

    case AUTHOR:
      if (value == null) {
        unsetAuthor();
      } else {
        setAuthor((String)value);
      }
      break;

    case AUTHORS:
      if (value == null) {
        unsetAuthors();
      } else {
        setAuthors((String)value);
      }
      break;

    case PUB_YEAR:
      if (value == null) {
        unsetPub_year();
      } else {
        setPub_year((String)value);
      }
      break;

    case IMPRINT:
      if (value == null) {
        unsetImprint();
      } else {
        setImprint((String)value);
      }
      break;

    case CLC_CODE:
      if (value == null) {
        unsetClc_code();
      } else {
        setClc_code((String)value);
      }
      break;

    case KEYWORDS:
      if (value == null) {
        unsetKeywords();
      } else {
        setKeywords((String)value);
      }
      break;

    case ISXN:
      if (value == null) {
        unsetIsxn();
      } else {
        setIsxn((String)value);
      }
      break;

    case CALL_NO:
      if (value == null) {
        unsetCall_no();
      } else {
        setCall_no((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case BOOK_ORDER:
      return getBook_order();

    case BOOK_ORDER_OPAC:
      return getBook_order_opac();

    case BOOK_MODEL_ORDER:
      return Integer.valueOf(getBook_model_order());

    case BOOK_TITLE:
      return getBook_title();

    case AUTHOR:
      return getAuthor();

    case AUTHORS:
      return getAuthors();

    case PUB_YEAR:
      return getPub_year();

    case IMPRINT:
      return getImprint();

    case CLC_CODE:
      return getClc_code();

    case KEYWORDS:
      return getKeywords();

    case ISXN:
      return getIsxn();

    case CALL_NO:
      return getCall_no();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case BOOK_ORDER:
      return isSetBook_order();
    case BOOK_ORDER_OPAC:
      return isSetBook_order_opac();
    case BOOK_MODEL_ORDER:
      return isSetBook_model_order();
    case BOOK_TITLE:
      return isSetBook_title();
    case AUTHOR:
      return isSetAuthor();
    case AUTHORS:
      return isSetAuthors();
    case PUB_YEAR:
      return isSetPub_year();
    case IMPRINT:
      return isSetImprint();
    case CLC_CODE:
      return isSetClc_code();
    case KEYWORDS:
      return isSetKeywords();
    case ISXN:
      return isSetIsxn();
    case CALL_NO:
      return isSetCall_no();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Book)
      return this.equals((Book)that);
    return false;
  }

  public boolean equals(Book that) {
    if (that == null)
      return false;

    boolean this_present_book_order = true && this.isSetBook_order();
    boolean that_present_book_order = true && that.isSetBook_order();
    if (this_present_book_order || that_present_book_order) {
      if (!(this_present_book_order && that_present_book_order))
        return false;
      if (!this.book_order.equals(that.book_order))
        return false;
    }

    boolean this_present_book_order_opac = true && this.isSetBook_order_opac();
    boolean that_present_book_order_opac = true && that.isSetBook_order_opac();
    if (this_present_book_order_opac || that_present_book_order_opac) {
      if (!(this_present_book_order_opac && that_present_book_order_opac))
        return false;
      if (!this.book_order_opac.equals(that.book_order_opac))
        return false;
    }

    boolean this_present_book_model_order = true;
    boolean that_present_book_model_order = true;
    if (this_present_book_model_order || that_present_book_model_order) {
      if (!(this_present_book_model_order && that_present_book_model_order))
        return false;
      if (this.book_model_order != that.book_model_order)
        return false;
    }

    boolean this_present_book_title = true && this.isSetBook_title();
    boolean that_present_book_title = true && that.isSetBook_title();
    if (this_present_book_title || that_present_book_title) {
      if (!(this_present_book_title && that_present_book_title))
        return false;
      if (!this.book_title.equals(that.book_title))
        return false;
    }

    boolean this_present_author = true && this.isSetAuthor();
    boolean that_present_author = true && that.isSetAuthor();
    if (this_present_author || that_present_author) {
      if (!(this_present_author && that_present_author))
        return false;
      if (!this.author.equals(that.author))
        return false;
    }

    boolean this_present_authors = true && this.isSetAuthors();
    boolean that_present_authors = true && that.isSetAuthors();
    if (this_present_authors || that_present_authors) {
      if (!(this_present_authors && that_present_authors))
        return false;
      if (!this.authors.equals(that.authors))
        return false;
    }

    boolean this_present_pub_year = true && this.isSetPub_year();
    boolean that_present_pub_year = true && that.isSetPub_year();
    if (this_present_pub_year || that_present_pub_year) {
      if (!(this_present_pub_year && that_present_pub_year))
        return false;
      if (!this.pub_year.equals(that.pub_year))
        return false;
    }

    boolean this_present_imprint = true && this.isSetImprint();
    boolean that_present_imprint = true && that.isSetImprint();
    if (this_present_imprint || that_present_imprint) {
      if (!(this_present_imprint && that_present_imprint))
        return false;
      if (!this.imprint.equals(that.imprint))
        return false;
    }

    boolean this_present_clc_code = true && this.isSetClc_code();
    boolean that_present_clc_code = true && that.isSetClc_code();
    if (this_present_clc_code || that_present_clc_code) {
      if (!(this_present_clc_code && that_present_clc_code))
        return false;
      if (!this.clc_code.equals(that.clc_code))
        return false;
    }

    boolean this_present_keywords = true && this.isSetKeywords();
    boolean that_present_keywords = true && that.isSetKeywords();
    if (this_present_keywords || that_present_keywords) {
      if (!(this_present_keywords && that_present_keywords))
        return false;
      if (!this.keywords.equals(that.keywords))
        return false;
    }

    boolean this_present_isxn = true && this.isSetIsxn();
    boolean that_present_isxn = true && that.isSetIsxn();
    if (this_present_isxn || that_present_isxn) {
      if (!(this_present_isxn && that_present_isxn))
        return false;
      if (!this.isxn.equals(that.isxn))
        return false;
    }

    boolean this_present_call_no = true && this.isSetCall_no();
    boolean that_present_call_no = true && that.isSetCall_no();
    if (this_present_call_no || that_present_call_no) {
      if (!(this_present_call_no && that_present_call_no))
        return false;
      if (!this.call_no.equals(that.call_no))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_book_order = true && (isSetBook_order());
    list.add(present_book_order);
    if (present_book_order)
      list.add(book_order);

    boolean present_book_order_opac = true && (isSetBook_order_opac());
    list.add(present_book_order_opac);
    if (present_book_order_opac)
      list.add(book_order_opac);

    boolean present_book_model_order = true;
    list.add(present_book_model_order);
    if (present_book_model_order)
      list.add(book_model_order);

    boolean present_book_title = true && (isSetBook_title());
    list.add(present_book_title);
    if (present_book_title)
      list.add(book_title);

    boolean present_author = true && (isSetAuthor());
    list.add(present_author);
    if (present_author)
      list.add(author);

    boolean present_authors = true && (isSetAuthors());
    list.add(present_authors);
    if (present_authors)
      list.add(authors);

    boolean present_pub_year = true && (isSetPub_year());
    list.add(present_pub_year);
    if (present_pub_year)
      list.add(pub_year);

    boolean present_imprint = true && (isSetImprint());
    list.add(present_imprint);
    if (present_imprint)
      list.add(imprint);

    boolean present_clc_code = true && (isSetClc_code());
    list.add(present_clc_code);
    if (present_clc_code)
      list.add(clc_code);

    boolean present_keywords = true && (isSetKeywords());
    list.add(present_keywords);
    if (present_keywords)
      list.add(keywords);

    boolean present_isxn = true && (isSetIsxn());
    list.add(present_isxn);
    if (present_isxn)
      list.add(isxn);

    boolean present_call_no = true && (isSetCall_no());
    list.add(present_call_no);
    if (present_call_no)
      list.add(call_no);

    return list.hashCode();
  }

  @Override
  public int compareTo(Book other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetBook_order()).compareTo(other.isSetBook_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBook_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.book_order, other.book_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBook_order_opac()).compareTo(other.isSetBook_order_opac());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBook_order_opac()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.book_order_opac, other.book_order_opac);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBook_model_order()).compareTo(other.isSetBook_model_order());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBook_model_order()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.book_model_order, other.book_model_order);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBook_title()).compareTo(other.isSetBook_title());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBook_title()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.book_title, other.book_title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthor()).compareTo(other.isSetAuthor());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthor()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.author, other.author);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthors()).compareTo(other.isSetAuthors());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthors()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authors, other.authors);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPub_year()).compareTo(other.isSetPub_year());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPub_year()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pub_year, other.pub_year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImprint()).compareTo(other.isSetImprint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImprint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imprint, other.imprint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetClc_code()).compareTo(other.isSetClc_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClc_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clc_code, other.clc_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetKeywords()).compareTo(other.isSetKeywords());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeywords()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keywords, other.keywords);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsxn()).compareTo(other.isSetIsxn());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsxn()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isxn, other.isxn);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCall_no()).compareTo(other.isSetCall_no());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCall_no()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.call_no, other.call_no);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Book(");
    boolean first = true;

    sb.append("book_order:");
    if (this.book_order == null) {
      sb.append("null");
    } else {
      sb.append(this.book_order);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("book_order_opac:");
    if (this.book_order_opac == null) {
      sb.append("null");
    } else {
      sb.append(this.book_order_opac);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("book_model_order:");
    sb.append(this.book_model_order);
    first = false;
    if (!first) sb.append(", ");
    sb.append("book_title:");
    if (this.book_title == null) {
      sb.append("null");
    } else {
      sb.append(this.book_title);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("author:");
    if (this.author == null) {
      sb.append("null");
    } else {
      sb.append(this.author);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authors:");
    if (this.authors == null) {
      sb.append("null");
    } else {
      sb.append(this.authors);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("pub_year:");
    if (this.pub_year == null) {
      sb.append("null");
    } else {
      sb.append(this.pub_year);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imprint:");
    if (this.imprint == null) {
      sb.append("null");
    } else {
      sb.append(this.imprint);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clc_code:");
    if (this.clc_code == null) {
      sb.append("null");
    } else {
      sb.append(this.clc_code);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keywords:");
    if (this.keywords == null) {
      sb.append("null");
    } else {
      sb.append(this.keywords);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isxn:");
    if (this.isxn == null) {
      sb.append("null");
    } else {
      sb.append(this.isxn);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("call_no:");
    if (this.call_no == null) {
      sb.append("null");
    } else {
      sb.append(this.call_no);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BookStandardSchemeFactory implements SchemeFactory {
    public BookStandardScheme getScheme() {
      return new BookStandardScheme();
    }
  }

  private static class BookStandardScheme extends StandardScheme<Book> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Book struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BOOK_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.book_order = iprot.readString();
              struct.setBook_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BOOK_ORDER_OPAC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.book_order_opac = iprot.readString();
              struct.setBook_order_opacIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BOOK_MODEL_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.book_model_order = iprot.readI32();
              struct.setBook_model_orderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BOOK_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.book_title = iprot.readString();
              struct.setBook_titleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AUTHOR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.author = iprot.readString();
              struct.setAuthorIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // AUTHORS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authors = iprot.readString();
              struct.setAuthorsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PUB_YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.pub_year = iprot.readString();
              struct.setPub_yearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IMPRINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imprint = iprot.readString();
              struct.setImprintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CLC_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clc_code = iprot.readString();
              struct.setClc_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // KEYWORDS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keywords = iprot.readString();
              struct.setKeywordsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ISXN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isxn = iprot.readString();
              struct.setIsxnIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // CALL_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.call_no = iprot.readString();
              struct.setCall_noIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Book struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.book_order != null) {
        oprot.writeFieldBegin(BOOK_ORDER_FIELD_DESC);
        oprot.writeString(struct.book_order);
        oprot.writeFieldEnd();
      }
      if (struct.book_order_opac != null) {
        oprot.writeFieldBegin(BOOK_ORDER_OPAC_FIELD_DESC);
        oprot.writeString(struct.book_order_opac);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(BOOK_MODEL_ORDER_FIELD_DESC);
      oprot.writeI32(struct.book_model_order);
      oprot.writeFieldEnd();
      if (struct.book_title != null) {
        oprot.writeFieldBegin(BOOK_TITLE_FIELD_DESC);
        oprot.writeString(struct.book_title);
        oprot.writeFieldEnd();
      }
      if (struct.author != null) {
        oprot.writeFieldBegin(AUTHOR_FIELD_DESC);
        oprot.writeString(struct.author);
        oprot.writeFieldEnd();
      }
      if (struct.authors != null) {
        oprot.writeFieldBegin(AUTHORS_FIELD_DESC);
        oprot.writeString(struct.authors);
        oprot.writeFieldEnd();
      }
      if (struct.pub_year != null) {
        oprot.writeFieldBegin(PUB_YEAR_FIELD_DESC);
        oprot.writeString(struct.pub_year);
        oprot.writeFieldEnd();
      }
      if (struct.imprint != null) {
        oprot.writeFieldBegin(IMPRINT_FIELD_DESC);
        oprot.writeString(struct.imprint);
        oprot.writeFieldEnd();
      }
      if (struct.clc_code != null) {
        oprot.writeFieldBegin(CLC_CODE_FIELD_DESC);
        oprot.writeString(struct.clc_code);
        oprot.writeFieldEnd();
      }
      if (struct.keywords != null) {
        oprot.writeFieldBegin(KEYWORDS_FIELD_DESC);
        oprot.writeString(struct.keywords);
        oprot.writeFieldEnd();
      }
      if (struct.isxn != null) {
        oprot.writeFieldBegin(ISXN_FIELD_DESC);
        oprot.writeString(struct.isxn);
        oprot.writeFieldEnd();
      }
      if (struct.call_no != null) {
        oprot.writeFieldBegin(CALL_NO_FIELD_DESC);
        oprot.writeString(struct.call_no);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BookTupleSchemeFactory implements SchemeFactory {
    public BookTupleScheme getScheme() {
      return new BookTupleScheme();
    }
  }

  private static class BookTupleScheme extends TupleScheme<Book> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Book struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetBook_order()) {
        optionals.set(0);
      }
      if (struct.isSetBook_order_opac()) {
        optionals.set(1);
      }
      if (struct.isSetBook_model_order()) {
        optionals.set(2);
      }
      if (struct.isSetBook_title()) {
        optionals.set(3);
      }
      if (struct.isSetAuthor()) {
        optionals.set(4);
      }
      if (struct.isSetAuthors()) {
        optionals.set(5);
      }
      if (struct.isSetPub_year()) {
        optionals.set(6);
      }
      if (struct.isSetImprint()) {
        optionals.set(7);
      }
      if (struct.isSetClc_code()) {
        optionals.set(8);
      }
      if (struct.isSetKeywords()) {
        optionals.set(9);
      }
      if (struct.isSetIsxn()) {
        optionals.set(10);
      }
      if (struct.isSetCall_no()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetBook_order()) {
        oprot.writeString(struct.book_order);
      }
      if (struct.isSetBook_order_opac()) {
        oprot.writeString(struct.book_order_opac);
      }
      if (struct.isSetBook_model_order()) {
        oprot.writeI32(struct.book_model_order);
      }
      if (struct.isSetBook_title()) {
        oprot.writeString(struct.book_title);
      }
      if (struct.isSetAuthor()) {
        oprot.writeString(struct.author);
      }
      if (struct.isSetAuthors()) {
        oprot.writeString(struct.authors);
      }
      if (struct.isSetPub_year()) {
        oprot.writeString(struct.pub_year);
      }
      if (struct.isSetImprint()) {
        oprot.writeString(struct.imprint);
      }
      if (struct.isSetClc_code()) {
        oprot.writeString(struct.clc_code);
      }
      if (struct.isSetKeywords()) {
        oprot.writeString(struct.keywords);
      }
      if (struct.isSetIsxn()) {
        oprot.writeString(struct.isxn);
      }
      if (struct.isSetCall_no()) {
        oprot.writeString(struct.call_no);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Book struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.book_order = iprot.readString();
        struct.setBook_orderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.book_order_opac = iprot.readString();
        struct.setBook_order_opacIsSet(true);
      }
      if (incoming.get(2)) {
        struct.book_model_order = iprot.readI32();
        struct.setBook_model_orderIsSet(true);
      }
      if (incoming.get(3)) {
        struct.book_title = iprot.readString();
        struct.setBook_titleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.author = iprot.readString();
        struct.setAuthorIsSet(true);
      }
      if (incoming.get(5)) {
        struct.authors = iprot.readString();
        struct.setAuthorsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.pub_year = iprot.readString();
        struct.setPub_yearIsSet(true);
      }
      if (incoming.get(7)) {
        struct.imprint = iprot.readString();
        struct.setImprintIsSet(true);
      }
      if (incoming.get(8)) {
        struct.clc_code = iprot.readString();
        struct.setClc_codeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.keywords = iprot.readString();
        struct.setKeywordsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isxn = iprot.readString();
        struct.setIsxnIsSet(true);
      }
      if (incoming.get(11)) {
        struct.call_no = iprot.readString();
        struct.setCall_noIsSet(true);
      }
    }
  }

}

